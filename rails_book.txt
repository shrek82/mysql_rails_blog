1、rake命令：
-----------------------------------------------------------
1.1、创建数据库
rake db:create
--------------------------------------------------------
1.2、数据迁移，db/schema.rb生成到mysql或数据库，如果表已经存在就不可以
rake db:migrate

备注：因为预设是跑在development模式，这个指令会用config/database.yml设定里的development那段所指定的资料库。

----------------------------------------------------------
1.3 从数据库导出迁移文件
rake db:schema:dump

------------------------------------------------------------

2、rails命令
2.1、//脚手架(scaffold)学习------------------------------------
scaffold可以生成一套保证包含了控制器，模型，视图，迁移结构等资源，例如：
$ rails g scaffold person name:string bio:text birthday:date

db/migrate/20110517161435_create_people.rb	用来建立people资料库资料表的Migration(你的档案开头名称会有不同的时间)
app/models/person.rb	person model档案
test/fixtures/people.yml	用来测试的假文章资料
app/controllers/people_controller.rb	people controller档案
app/views/people/index.html.erb	用来显示所有文章的index页面
app/views/people/edit.html.erb	用来编辑文章的页面
app/views/people/show.html.erb	用来显示特定一篇文章的页面
app/views/people/new.html.erb	用来新增文章的页面
app/views/people/_form.html.erb	用来显示编辑和新增文章的表单局部(Partial)样板
app/helpers/people_helper.rb	可在文章Views中使用的Helper方法
test/unit/person_test.rb	people model的单元测试
test/functional/people_controller_test.rb	people controller的功能测试
test/unit/helpers/people_helper_test.rb	people helper的单元测试
config/routes.rb	设定URL路由规则的档案，scaffold再此新增了一行resources :people
app/assets/stylesheets/scaffold.css.scss	Scaffold鹰架提供的样式档案
app/assets/stylesheets/people.css.scss	people的CSS样式档案
app/assets/javascripts/people.js.coffee	people的JavaScript档案

Rails的scaffold脚手架功能会自动产生一组Model、Views跟Controller程式码，完成一个简易的CRUD程式以供展示及学习之用。

虽然鹰架(scaffolding)可以帮助你快速上手，但是可没办法产生出完美符合需求的程式码。因此有经验的Rails程式设计师甚少使用预设的鹰架产生程式码，而是偏好使用Rails的generator来分别产生Model和Controller档案，甚至客制出自己专属的scaffold程式。

scaffold产生出来的程式中，有一项是资料库迁移档(database migration)。Migration的用途是建立和修改资料库资料表。Rails使用rake指令来执行Migrations。Migration的档名中包含了Timestamp (时间戳章)，用来确保它们可以依照建立时间依序执行。


2.2、创建控制器(名称为home，index为一项操作，可以是多项操作，用空格隔开)
rails generate controller home index show.....
可以简写为
rails g controller home index show.....

3、控制台 console

4、gem管理工具
RubyGems是Ruby的 ​​套件管理系统，让你轻易安装及管理Ruby函式库。你可以在RubyGems上找到所有的Ruby开源套件。另外，读者如果想找Ruby或Rails有哪些好用的套件，也可以浏览看看The Ruby Toolbox，这个站依照套件的热门程度排序，非常方便。
gem -v 告诉你RubyGems 的版本
gem update --system 升级RubyGems的版本
gem install gem_name 安装某个套件
gem list 列出安装的套件
gem update gem_name 更新最新版本
gem update 更新所有你安装的Gems
gem install -v xxx gemname 安装特定版本
gem uninstall gem_name 反安装

-------------------------------------------------------------------
rake db:create 按照目前的 RAILS_ENV 环境建立数据库
rake db:create:all 建立所有环境的数据库
rake db:drop 按照目前的 RAILS_ENV 环境删除数据库
rake db:drop:all 删除所有环境的数据库
rake db:migrate 执行Migration操作
rake db:rollback STEP=n 回滚上N个Migration操作
rake db:migrate:up VERSION=20080906120000 执行指定版本的Migration
rake db:migrate:down VERSION=20080906120000 回滚指定版本的Migration
rake db:version 当前数据库的Migration版本
rake db:seed 执行 db/seeds.rb 载入种子数据


//其他笔记-----------------------------------------------------
如果要自定义首页，须删除默认的public/index.html
然后再config/routes.rb中取消注释，并设置 root :to=>'home#index'
"home#index"这一行告诉Rails将root网址对应到home controller的index action。


#rails
【Rails之道】第2章 运用控制器(渲染,重定向,过滤器,流)
01.渲染其他模板
render :action=>"new" #渲染到new这个action里
--------------------------------------------
02.渲染一个不同模板
render :template=>"user/index" #常用 app/views/user/index.rhtml
render :file=>"~/wwwroot/shop/app/views/user/index.rhtml"
--------------------------------------------
03.渲染局部模板
<%= render :partial=>'user' %> #这个是views一遍在一个模板,调用另一个模板(命名:_user.html.erb)
--------------------------------------------
04.渲染内联模板
render :inline=> "<%=auto_complete_result(@heading,'name')%>"
--------------------------------------------
05.渲染文本
render :text=>'I love badwolf'
--------------------------------------------
06.渲染json和xml
render :json=>@record.to_json
render :xml=>@record.to_xml
--------------------------------------------
07.什么都不渲染
render :nothing=>true,:status=> 401 #未授权
--------------------------------------------
08.渲染属性
:content_type (例如 text/html) 在web上东西都属于MIME规定类型..还有其他文件图片等
:layout 指定使用哪个布局模板
:status 307(暂时重定向) 401(未授权) 403(禁止访问) 404(NOT found) 503(服务不可用)
--------------------------------------------
09.重定向
#rails应用程序有他的生命周期,重定向就是结束这个周期,终止以前的,重新开始.
redirect_to :controller=>"main" 
--------------------------------------------
10.过滤器
#过滤器可实现向下继承,
before_filter :audit #前置,
after_after :audit #后置,
around_after :test #环绕,例如测试程序运行时间,开始和结尾之间.
--------------------------------------------
11.过滤器类型
方法引用: before_filter :audit 
外部类:   before_filter Output #注意没冒号
内联方法: before_fiter {|controller| false if controller.params["stop"]}
--------------------------------------------
12.过滤器排序
prepend_before_fitler :audit #有这个在前面
--------------------------------------------
13.跳过过滤器(有时子类需要跳过父类的)
skip_before_fitler :audit #有这个在前面
--------------------------------------------
14.过滤器条件(only和expcept)
:only=>:index #单一方法,
:only=>[:foo,:bar] #数组方法,
--------------------------------------------
15.过滤器挂起
让过滤器方法返回false,或render和redirect_to ,这里都会挂起
--------------------------------------------
16.流
send_data(data,options={})
send_data generate_agz('dir'),:filen=>'dir.tgz'
选项:
:filename 给浏览器指定名字
:type 给浏览器指定类型,默认application/octetstream
:disposition 指定文件下载(默认attachment ,显示inline)
:status 状态 默认"200 OK"

send_file(path,options={})
例:send_file '/path/to.jpg',:type=>'image/jpeg',:disposition=>'inline'
例:send_file '/path/404.html',:type=>'text/html;charset=utf-8',:status=>404
选项:
:filename 给浏览器指定名字 默认File.basename(path)
:type 给浏览器指定类型,默认application/octetstream
:disposition 指定文件下载(默认attachment ,显示inline)
:buffer_size 指定缓存大小4096 (每次发送大小,存点发点)
:status 状态 默认"200 OK"
--------------------------------------------
17.让服务器发送文件
节省内存的方法,
用Apache和Lighttpd
response.headers['X-Sendfile']=path
用Nginx
response.headers['X-Accel-Redirect']=path


ruby-转义字符和特殊字符
平常用着就用着了，时间一长没用突然想不起来一些在ruby中的转义符是什么，就从网上找了个记录下

字符串 含义
\a     替换成Bell声所对应的符号
\nnn   nnn表示一个八进制数值，替换成该八进制所对应的字符
\b     退格符，替换成退格键所对应的字符
\xnn   xnn表示一个十六进制数，替换成该十六进制数所对应的字符
\e     替换成Escape键对应的字符
\cx    替换成Ctrl+X组合键对应的字符，其中x可以是任意键对应的字符
\C-x   替换成Ctrl+X组合键对应的字符，其中x可以是任意键对应的字符
\n     换行符，替换成一个空行
\M-x   替换成Alt+X组合键对应的字符，其中x可以是任意键对应的字符
\r     回车符，替换成一个回车
\M-\C-x 替换成Ctrl+Alt+X组合键对应的字符，其中x可以是任意键对应的字符
\s     空白符，替换成一个空白字符
\t     替换成一个Tab键所对应的字符
\v     替换成一个垂直Tab键所对应的字符
#{expr}替换成变量或者表达式expr所对应的值